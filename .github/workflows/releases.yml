name: Releases

on:
  push:
    branches: [ main, dev ]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          dependencies: '"hard"'
          extra-packages: |
            any::rcmdcheck
            

      - name: Get R package version
        id: rversion
        run: |
          VERSION=$(Rscript -e 'cat(as.character(packageVersion("RPipelineTest")))')
          echo "DEBUG: VERSION from R step is '$VERSION'"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Configure Identity 
        run: | 
          git config user.name "github-actions[bot]" 
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create Tag
        id: vars
        run: |
          set -euo pipefail

          VERSION="${{ steps.rversion.outputs.version }}"

          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            TAG="v${VERSION}"
          else
            SHORTSHA="$(git rev-parse --short "$GITHUB_SHA")"
            TAG="v${VERSION}-${SHORTSHA}"
          fi


          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Tag $TAG already exists; failing."
            exit 1
          fi

          git tag -a "$TAG" -m "Tag $TAG for ${GITHUB_REF_NAME}"
          git push origin "$TAG"

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create release (main)
        if: github.ref_name == 'main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.vars.outputs.tag }}" \
            --title "${{ steps.vars.outputs.tag }}" \
            --generate-notes

      - name: Create prerelease (dev)
        if: github.ref_name == 'dev'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.vars.outputs.tag }}" \
            --title "${{ steps.vars.outputs.tag }} (dev)" \
            --prerelease \
            --generate-notes

      - name: Build R source tarball
        id: buildpkg
        run: |
          set -euo pipefail
          mkdir -p dist
          # build source package (.tar.gz) without vignettes/manual to avoid extra system deps
          R CMD build . 
          TARBALL="$(ls -1t *.tar.gz | head -n1)"
          echo "tarball=$TARBALL" >> "$GITHUB_OUTPUT"
          echo "Built: $TARBALL"

      - name: Upload tarball to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ steps.vars.outputs.tag }}" "${{ steps.buildpkg.outputs.tarball }}" --clobber